#include "database_driver_manager.h"
#include <QSqlDatabase>
#include <QSqlError>
#include <QSqlQuery>
#include <QStandardPaths>
#include <QDir>
#include <QProcess>
#include <QDebug>
#include <QRegularExpression>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QMap>
#include <QVariant>

namespace scratchrobin {

// Initialize static instance inside namespace
std::unique_ptr<DatabaseDriverManager> DatabaseDriverManager::instance_ = nullptr;

DatabaseDriverManager& DatabaseDriverManager::instance() {
    if (!instance_) {
        instance_.reset(new DatabaseDriverManager());
    }
    return *instance_;
}

DatabaseDriverManager::DatabaseDriverManager(QObject* parent)
    : QObject(parent) {
    initializeDrivers();
    scanAvailableDrivers();
}

void DatabaseDriverManager::initializeDrivers() {
    setupPostgreSQLDriver();
    setupMySQLDriver();
    setupMariaDBDriver();
    setupMSSQLDriver();
    setupODBCDriver();
    setupFirebirdSQLDriver();
    setupSQLiteDriver();
    setupOracleDriver();
    setupSQLServerDriver();
    setupDB2Driver();

    // Note: MariaDB uses the same driver as MySQL, so it's handled in setupMySQLDriver()
    // PostgreSQL uses QPSQL driver for full PostgreSQL support
}

void DatabaseDriverManager::scanAvailableDrivers() {
    // TODO: Implement driver scanning
}

// Essential public interface methods needed by UI components
QString DatabaseDriverManager::databaseTypeToString(DatabaseType type) const {
    switch (type) {
        case DatabaseType::POSTGRESQL: return "PostgreSQL";
        case DatabaseType::MYSQL: return "MySQL";
        case DatabaseType::MARIADB: return "MariaDB";
        case DatabaseType::SQLITE: return "SQLite";
        case DatabaseType::ORACLE: return "Oracle";
        case DatabaseType::SQLSERVER: return "SQL Server";
        case DatabaseType::MSSQL: return "Microsoft SQL Server";
        case DatabaseType::ODBC: return "ODBC";
        case DatabaseType::FIREBIRD: return "FirebirdSQL";
        case DatabaseType::DB2: return "DB2";
        default: return "Unknown";
    }
}

DatabaseType DatabaseDriverManager::stringToDatabaseType(const QString& str) const {
    QString lower = str.toLower();
    if (lower == "postgresql") return DatabaseType::POSTGRESQL;
    if (lower == "mysql") return DatabaseType::MYSQL;
    if (lower == "mariadb") return DatabaseType::MARIADB;
    if (lower == "sqlite") return DatabaseType::SQLITE;
    if (lower == "oracle") return DatabaseType::ORACLE;
    if (lower == "sql server" || lower == "mssql" || lower == "microsoft sql server") return DatabaseType::SQLSERVER;
    if (lower == "odbc") return DatabaseType::ODBC;
    if (lower == "firebird" || lower == "firebirdsql") return DatabaseType::FIREBIRD;
    if (lower == "db2") return DatabaseType::DB2;
    return DatabaseType::POSTGRESQL; // default
}

QStringList DatabaseDriverManager::getDatabaseTypeList() const {
    return QStringList() << "PostgreSQL" << "MySQL" << "SQLite" << "Oracle" << "Microsoft SQL Server" << "SQL Server" << "MariaDB" << "ODBC" << "FirebirdSQL" << "DB2";
}

// Connection testing implementation
bool DatabaseDriverManager::testConnection(const DatabaseConnectionConfig& config, QString& errorMessage) {
    QSqlDatabase db = QSqlDatabase::addDatabase(getDriver(config.databaseType).driverName, "test_connection");

    // Set connection parameters based on database type
    switch (config.databaseType) {
        case DatabaseType::POSTGRESQL:
            db.setHostName(config.host);
            db.setPort(config.port);
            db.setDatabaseName(config.database);
            db.setUserName(config.username);
            db.setPassword(config.password);
            break;

        case DatabaseType::MYSQL:
        case DatabaseType::MARIADB:
            db.setHostName(config.host);
            db.setPort(config.port);
            db.setDatabaseName(config.database);
            db.setUserName(config.username);
            db.setPassword(config.password);

            // Set additional connection options for MySQL/MariaDB
            if (!config.additionalParameters.value("charset").toString().isEmpty()) {
                db.setConnectOptions("CLIENT_CHARSET=" + config.additionalParameters.value("charset").toString());
            }
            if (config.additionalParameters.value("compress", false).toBool()) {
                db.setConnectOptions("CLIENT_COMPRESS=1");
            }
            if (!config.additionalParameters.value("ssl_ca").toString().isEmpty()) {
                QString sslOptions = "SSL_CA=" + config.additionalParameters.value("ssl_ca").toString();
                if (!config.additionalParameters.value("ssl_cert").toString().isEmpty()) {
                    sslOptions += ";SSL_CERT=" + config.additionalParameters.value("ssl_cert").toString();
                }
                if (!config.additionalParameters.value("ssl_key").toString().isEmpty()) {
                    sslOptions += ";SSL_KEY=" + config.additionalParameters.value("ssl_key").toString();
                }
                db.setConnectOptions(sslOptions);
            }
            break;

        case DatabaseType::SQLITE:
            db.setDatabaseName(config.database);
            break;

        case DatabaseType::MSSQL:
        case DatabaseType::SQLSERVER: {
            // Use ODBC connection string for SQL Server
            QString connectionString = generateConnectionString(config);
            db.setDatabaseName(connectionString);
            break;
        }

        case DatabaseType::ORACLE:
            db.setHostName(config.host);
            db.setPort(config.port);
            db.setDatabaseName(config.database);
            db.setUserName(config.username);
            db.setPassword(config.password);
            break;

        case DatabaseType::FIREBIRD:
            db.setDatabaseName(config.database);
            db.setHostName(config.host);
            db.setPort(config.port);
            db.setUserName(config.username);
            db.setPassword(config.password);
            break;

        default:
            errorMessage = "Database type not supported for connection testing";
            return false;
    }

    // Set additional parameters
    if (!config.sslMode.isEmpty() && config.sslMode != "prefer") {
        db.setConnectOptions(QString("SSL_MODE=%1").arg(config.sslMode));
    }

    if (config.timeout > 0) {
        db.setConnectOptions(QString("CONNECT_TIMEOUT=%1").arg(config.timeout));
    }

    // Try to open connection
    if (db.open()) {
        db.close();
        QSqlDatabase::removeDatabase("test_connection");
        return true;
    } else {
        errorMessage = db.lastError().text();
        QSqlDatabase::removeDatabase("test_connection");
        return false;
    }
}

QString DatabaseDriverManager::generateConnectionString(const DatabaseConnectionConfig& config) const {
    switch (config.databaseType) {
        case DatabaseType::POSTGRESQL:
            return QString("host=%1 port=%2 dbname=%3 user=%4 password=%5")
                    .arg(config.host, QString::number(config.port), config.database, config.username, config.password);

        case DatabaseType::MYSQL:
            return QString("host=%1 port=%2 database=%3 user=%4 password=%5")
                    .arg(config.host, QString::number(config.port), config.database, config.username, config.password);

        case DatabaseType::MARIADB:
            return QString("host=%1 port=%2 database=%3 user=%4 password=%5")
                    .arg(config.host, QString::number(config.port), config.database, config.username, config.password);

        case DatabaseType::SQLITE:
            return config.database;

        case DatabaseType::MSSQL:
        case DatabaseType::SQLSERVER: {
            // Generate ODBC connection string for SQL Server
            QStringList parts;

            // Check if DSN is provided
            if (config.additionalParameters.contains("dsn") && !config.additionalParameters["dsn"].toString().isEmpty()) {
                parts << QString("DSN=%1").arg(config.additionalParameters["dsn"].toString());
            } else {
                // Build connection string without DSN
                if (!config.host.isEmpty()) {
                    parts << QString("SERVER=%1").arg(config.host);
                    if (config.port > 0) {
                        parts << QString("SERVER=%1,%2").arg(config.host, QString::number(config.port));
                    }
                }

                if (!config.database.isEmpty()) {
                    parts << QString("DATABASE=%1").arg(config.database);
                }

                // Add driver specification
                QString driver = config.additionalParameters.value("driver", "{ODBC Driver 17 for SQL Server}").toString();
                parts << QString("DRIVER=%1").arg(driver);

                // Authentication
                if (config.additionalParameters.value("trusted_connection", false).toBool()) {
                    parts << "Trusted_Connection=Yes";
                } else {
                    if (!config.username.isEmpty()) {
                        parts << QString("UID=%1").arg(config.username);
                    }
                    if (!config.password.isEmpty()) {
                        parts << QString("PWD=%1").arg(config.password);
                    }
                }

                // SSL options
                if (config.additionalParameters.value("encrypt", false).toBool()) {
                    parts << "Encrypt=Yes";
                    if (config.additionalParameters.value("trust_server_certificate", false).toBool()) {
                        parts << "TrustServerCertificate=Yes";
                    }
                }
            }

            return parts.join(";");
        }

        case DatabaseType::ORACLE:
            return QString("host=%1 port=%2 dbname=%3 user=%4 password=%5")
                    .arg(config.host, QString::number(config.port), config.database, config.username, config.password);

        case DatabaseType::FIREBIRD:
            return QString("database=%1 host=%2 port=%3 user=%4 password=%5")
                    .arg(config.database, config.host, QString::number(config.port), config.username, config.password);

        default:
            return QString();
    }
}

// Connection parameter retrieval
QList<ConnectionParameter> DatabaseDriverManager::getConnectionParameters(DatabaseType type) const {
    if (drivers_.contains(type)) {
        return drivers_[type].connectionParameters;
    }
    return QList<ConnectionParameter>();
}

QString DatabaseDriverManager::getDefaultPort(DatabaseType type) const {
    switch (type) {
        case DatabaseType::POSTGRESQL: return "5432";
        case DatabaseType::MYSQL: return "3306";
        case DatabaseType::MARIADB: return "3306";
        case DatabaseType::ORACLE: return "1521";
        case DatabaseType::SQLSERVER: return "1433";
        case DatabaseType::MSSQL: return "1433";
        case DatabaseType::FIREBIRD: return "3050";
        case DatabaseType::DB2: return "50000";
        case DatabaseType::ODBC: return "0"; // ODBC can connect to various databases
        case DatabaseType::SQLITE: return "0"; // SQLite doesn't use ports
        default: return "0";
    }
}

bool DatabaseDriverManager::validateConnectionParameters(DatabaseType type, const QMap<QString, QVariant>& parameters) const {
    switch (type) {
        case DatabaseType::MSSQL:
        case DatabaseType::SQLSERVER: {
            // Validate MSSQL parameters
            if (!parameters.contains("server") || parameters["server"].toString().isEmpty()) {
                return false;
            }

            // Check authentication method
            bool useWindowsAuth = parameters.value("trusted_connection", false).toBool();
            bool useSQLAuth = !useWindowsAuth;

            if (useSQLAuth) {
                if (!parameters.contains("username") || parameters["username"].toString().isEmpty()) {
                    return false;
                }
                if (!parameters.contains("password") || parameters["password"].toString().isEmpty()) {
                    return false;
                }
            }

            return true;
        }

        case DatabaseType::POSTGRESQL: {
            // Validate PostgreSQL parameters
            if (!parameters.contains("host") || parameters["host"].toString().isEmpty()) {
                return false;
            }
            if (!parameters.contains("database") || parameters["database"].toString().isEmpty()) {
                return false;
            }
            if (!parameters.contains("username") || parameters["username"].toString().isEmpty()) {
                return false;
            }
            return true;
        }

        case DatabaseType::MYSQL: {
            // Validate MySQL parameters
            if (!parameters.contains("host") || parameters["host"].toString().isEmpty()) {
                return false;
            }
            if (!parameters.contains("database") || parameters["database"].toString().isEmpty()) {
                return false;
            }
            if (!parameters.contains("username") || parameters["username"].toString().isEmpty()) {
                return false;
            }
            return true;
        }

        case DatabaseType::MARIADB: {
            // Validate MariaDB parameters
            if (!parameters.contains("host") || parameters["host"].toString().isEmpty()) {
                return false;
            }
            if (!parameters.contains("database") || parameters["database"].toString().isEmpty()) {
                return false;
            }
            if (!parameters.contains("username") || parameters["username"].toString().isEmpty()) {
                return false;
            }
            return true;
        }

        case DatabaseType::SQLITE: {
            // Validate SQLite parameters
            if (!parameters.contains("database") || parameters["database"].toString().isEmpty()) {
                return false;
            }
            return true;
        }

        default:
            return true; // For other database types, basic validation passes
    }
}

// Driver setup implementations
void DatabaseDriverManager::setupPostgreSQLDriver() {
    DatabaseDriver driver("QPSQL", "PostgreSQL", "QPSQL");
    driver.description = "PostgreSQL database driver with full feature support";
    driver.connectionParameters = {
        ConnectionParameter("host", "Host", "string", "localhost"),
        ConnectionParameter("port", "Port", "port", "5432"),
        ConnectionParameter("database", "Database", "string", "", true),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true),
        ConnectionParameter("charset", "Client Encoding", "string", "UTF8"),
        ConnectionParameter("search_path", "Schema Search Path", "string", "public"),
        ConnectionParameter("timezone", "Time Zone", "string", ""),
        ConnectionParameter("application_name", "Application Name", "string", "ScratchRobin"),
        ConnectionParameter("connect_timeout", "Connection Timeout", "number", "30"),
        ConnectionParameter("sslmode", "SSL Mode", "enum", "prefer", QStringList() << "disable" << "allow" << "prefer" << "require" << "verify-ca" << "verify-full"),
        ConnectionParameter("sslcert", "SSL Client Certificate", "file", ""),
        ConnectionParameter("sslkey", "SSL Client Key", "file", ""),
        ConnectionParameter("sslrootcert", "SSL Root Certificate", "file", ""),
        ConnectionParameter("sslcrl", "SSL Certificate Revocation List", "file", ""),
        ConnectionParameter("keepalives", "TCP Keepalives", "bool", "true"),
        ConnectionParameter("keepalives_idle", "TCP Keepalives Idle", "number", "0"),
        ConnectionParameter("keepalives_interval", "TCP Keepalives Interval", "number", "0"),
        ConnectionParameter("keepalives_count", "TCP Keepalives Count", "number", "0"),
        ConnectionParameter("target_session_attrs", "Session Attributes", "enum", "any", QStringList() << "any" << "read-write" << "read-only" << "primary" << "standby" << "prefer-standby"),
        ConnectionParameter("gssencmode", "GSS Encryption Mode", "enum", "disable", QStringList() << "disable" << "prefer" << "require")
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkPostgreSQLAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::POSTGRESQL] = driver;

    // Add connection parameters for PostgreSQL
    connectionParameters_[DatabaseType::POSTGRESQL] = driver.connectionParameters;
}

void DatabaseDriverManager::setupMySQLDriver() {
    DatabaseDriver driver("QMYSQL", "MySQL", "QMYSQL");
    driver.description = "MySQL database driver";
    driver.connectionParameters = {
        ConnectionParameter("host", "Host", "string", "localhost"),
        ConnectionParameter("port", "Port", "port", "3306"),
        ConnectionParameter("database", "Database", "string", "", true),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true),
        ConnectionParameter("charset", "Character Set", "string", "utf8mb4"),
        ConnectionParameter("collation", "Collation", "string", "utf8mb4_general_ci"),
        ConnectionParameter("compress", "Use Compression", "bool", "false"),
        ConnectionParameter("ssl_ca", "SSL CA Certificate", "file", ""),
        ConnectionParameter("ssl_cert", "SSL Client Certificate", "file", ""),
        ConnectionParameter("ssl_key", "SSL Client Key", "file", ""),
        ConnectionParameter("unix_socket", "Unix Socket", "file", ""),
        ConnectionParameter("named_pipe", "Named Pipe", "string", ""),
        ConnectionParameter("init_command", "Initial Command", "string", ""),
        ConnectionParameter("allow_local_infile", "Allow LOAD DATA LOCAL INFILE", "bool", "false"),
        ConnectionParameter("auto_reconnect", "Auto Reconnect", "bool", "true")
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkMySQLAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::MYSQL] = driver;

    // Add connection parameters for MySQL
    connectionParameters_[DatabaseType::MYSQL] = driver.connectionParameters;
}

void DatabaseDriverManager::setupMariaDBDriver() {
    DatabaseDriver driver("QMYSQL", "MariaDB", "QMYSQL");
    driver.description = "MariaDB database driver (uses MySQL driver)";
    driver.connectionParameters = {
        ConnectionParameter("host", "Host", "string", "localhost"),
        ConnectionParameter("port", "Port", "port", "3306"),
        ConnectionParameter("database", "Database", "string", "", true),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true),
        ConnectionParameter("charset", "Character Set", "string", "utf8mb4"),
        ConnectionParameter("collation", "Collation", "string", "utf8mb4_general_ci"),
        ConnectionParameter("compress", "Use Compression", "bool", "false"),
        ConnectionParameter("ssl_ca", "SSL CA Certificate", "file", ""),
        ConnectionParameter("ssl_cert", "SSL Client Certificate", "file", ""),
        ConnectionParameter("ssl_key", "SSL Client Key", "file", ""),
        ConnectionParameter("unix_socket", "Unix Socket", "file", ""),
        ConnectionParameter("named_pipe", "Named Pipe", "string", ""),
        ConnectionParameter("init_command", "Initial Command", "string", ""),
        ConnectionParameter("allow_local_infile", "Allow LOAD DATA LOCAL INFILE", "bool", "false"),
        ConnectionParameter("auto_reconnect", "Auto Reconnect", "bool", "true")
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkMariaDBAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::MARIADB] = driver;

    // Add connection parameters for MariaDB
    connectionParameters_[DatabaseType::MARIADB] = driver.connectionParameters;
}



void DatabaseDriverManager::setupMSSQLDriver() {
    DatabaseDriver driver("QODBC", "Microsoft SQL Server", "QODBC");
    driver.description = "Microsoft SQL Server database driver (via ODBC)";
    driver.connectionParameters = {
        ConnectionParameter("dsn", "Data Source Name", "string", "", false, false, "", "", "SQL Server ODBC DSN"),
        ConnectionParameter("host", "Server", "string", "localhost", false, false, "", "", "SQL Server instance name"),
        ConnectionParameter("port", "Port", "port", "1433"),
        ConnectionParameter("database", "Database", "string", "", true),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true),
        ConnectionParameter("driver", "ODBC Driver", "string", "{ODBC Driver 17 for SQL Server}"),
        ConnectionParameter("trusted_connection", "Use Windows Authentication", "bool", "false"),
        ConnectionParameter("encrypt", "Encrypt Connection", "bool", "false"),
        ConnectionParameter("trust_server_certificate", "Trust Server Certificate", "bool", "false")
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install Microsoft ODBC Driver for SQL Server and configure DSN or use connection string parameters";
    driver.requiredLibraries = QStringList() << "ODBC Driver for SQL Server" << "unixODBC (Linux/Mac)";
    driver.status = checkMSSQLAvailability() ? DriverStatus::Available : DriverStatus::NeedsInstallation;

    drivers_[DatabaseType::MSSQL] = driver;
    drivers_[DatabaseType::SQLSERVER] = driver; // Alias for SQL Server

    // Add connection parameters for MSSQL
    connectionParameters_[DatabaseType::MSSQL] = driver.connectionParameters;
    connectionParameters_[DatabaseType::SQLSERVER] = driver.connectionParameters;
}

void DatabaseDriverManager::setupODBCDriver() {
    DatabaseDriver driver("QODBC", "ODBC", "QODBC");
    driver.description = "Generic ODBC database driver";
    driver.connectionParameters = {
        ConnectionParameter("dsn", "Data Source Name", "string", "", true),
        ConnectionParameter("driver", "ODBC Driver", "string", "", false),
        ConnectionParameter("host", "Host", "string", "", false),
        ConnectionParameter("port", "Port", "port", "0"),
        ConnectionParameter("database", "Database", "string", "", false),
        ConnectionParameter("username", "Username", "string", "", false),
        ConnectionParameter("password", "Password", "password", "", false, true)
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install appropriate ODBC driver for your database";
    driver.status = checkODBCAAvailability() ? DriverStatus::Available : DriverStatus::NeedsInstallation;

    drivers_[DatabaseType::ODBC] = driver;

    // Add connection parameters for ODBC
    connectionParameters_[DatabaseType::ODBC] = driver.connectionParameters;
}

void DatabaseDriverManager::setupFirebirdSQLDriver() {
    DatabaseDriver driver("QIBASE", "FirebirdSQL", "QIBASE");
    driver.description = "FirebirdSQL database driver";
    driver.connectionParameters = {
        ConnectionParameter("database", "Database Path", "file", "", true),
        ConnectionParameter("host", "Host", "string", "localhost"),
        ConnectionParameter("port", "Port", "port", "3050"),
        ConnectionParameter("username", "Username", "string", "SYSDBA", true),
        ConnectionParameter("password", "Password", "password", "masterkey", true, true)
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkFirebirdSQLAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::FIREBIRD] = driver;

    // Add connection parameters for FirebirdSQL
    connectionParameters_[DatabaseType::FIREBIRD] = driver.connectionParameters;
}

void DatabaseDriverManager::setupSQLiteDriver() {
    DatabaseDriver driver("QSQLITE", "SQLite", "QSQLITE");
    driver.description = "SQLite database driver";
    driver.connectionParameters = {
        ConnectionParameter("database", "Database File", "file", "", true, false, "", "", "Path to SQLite database file")
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkSQLiteAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::SQLITE] = driver;

    // Add connection parameters for SQLite
    connectionParameters_[DatabaseType::SQLITE] = driver.connectionParameters;
}

void DatabaseDriverManager::setupOracleDriver() {
    DatabaseDriver driver("QOCI", "Oracle", "QOCI");
    driver.description = "Oracle database driver";
    driver.connectionParameters = {
        ConnectionParameter("db", "Database/TNS Name", "string", "", true),
        ConnectionParameter("host", "Host", "string", "", false),
        ConnectionParameter("port", "Port", "port", "1521"),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true)
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install Oracle Instant Client and set ORACLE_HOME environment variable";
    driver.status = checkOracleAvailability() ? DriverStatus::Available : DriverStatus::NeedsInstallation;

    drivers_[DatabaseType::ORACLE] = driver;

    // Add connection parameters for Oracle
    connectionParameters_[DatabaseType::ORACLE] = driver.connectionParameters;
}

void DatabaseDriverManager::setupSQLServerDriver() {
    // SQL Server uses the same driver as MSSQL
    setupMSSQLDriver();
}

void DatabaseDriverManager::setupDB2Driver() {
    DatabaseDriver driver("QDB2", "DB2", "QDB2");
    driver.description = "IBM DB2 database driver";
    driver.connectionParameters = {
        ConnectionParameter("db", "Database", "string", "", true),
        ConnectionParameter("host", "Host", "string", "", false),
        ConnectionParameter("port", "Port", "port", "50000"),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true)
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install IBM DB2 client libraries";
    driver.status = checkDB2Availability() ? DriverStatus::Available : DriverStatus::NeedsInstallation;

    drivers_[DatabaseType::DB2] = driver;
}

// Driver availability check implementations
bool DatabaseDriverManager::checkPostgreSQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QPSQL");
}

bool DatabaseDriverManager::checkMySQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QMYSQL");
}

bool DatabaseDriverManager::checkMariaDBAvailability() {
    // MariaDB uses the same driver as MySQL
    return QSqlDatabase::isDriverAvailable("QMYSQL");
}

bool DatabaseDriverManager::checkMSSQLAvailability() {
    // Check for ODBC driver availability
    return QSqlDatabase::isDriverAvailable("QODBC");
}

bool DatabaseDriverManager::checkODBCAAvailability() {
    return QSqlDatabase::isDriverAvailable("QODBC");
}

bool DatabaseDriverManager::checkFirebirdSQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QIBASE");
}

bool DatabaseDriverManager::checkSQLiteAvailability() {
    return QSqlDatabase::isDriverAvailable("QSQLITE");
}

bool DatabaseDriverManager::checkOracleAvailability() {
    return QSqlDatabase::isDriverAvailable("QOCI");
}

bool DatabaseDriverManager::checkSQLServerAvailability() {
    // SQL Server uses ODBC driver
    return QSqlDatabase::isDriverAvailable("QODBC");
}

bool DatabaseDriverManager::checkDB2Availability() {
    return QSqlDatabase::isDriverAvailable("QDB2");
}

void DatabaseDriverManager::setupODBCDriver() {
    DatabaseDriver driver("QODBC", "ODBC", "QODBC");
    driver.description = "Generic ODBC database driver";
    driver.connectionParameters = {
        ConnectionParameter("dsn", "Data Source Name", "string", "", true),
        ConnectionParameter("driver", "ODBC Driver", "string", "", false, false, "", "", "ODBC driver to use"),
        ConnectionParameter("server", "Server", "string", "", false),
        ConnectionParameter("port", "Port", "port", ""),
        ConnectionParameter("database", "Database", "string", "", false),
        ConnectionParameter("username", "Username", "string", "", false),
        ConnectionParameter("password", "Password", "password", "", false, true),
        ConnectionParameter("trusted_connection", "Use Trusted Connection", "bool", "false"),
        ConnectionParameter("encrypt", "Encrypt Connection", "bool", "false"),
        ConnectionParameter("trust_server_certificate", "Trust Server Certificate", "bool", "false")
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install appropriate ODBC driver for your database";
    driver.status = checkODBCAAvailability() ? DriverStatus::Available : DriverStatus::NeedsInstallation;

    drivers_[DatabaseType::ODBC] = driver;

    // Add connection parameters for ODBC
    connectionParameters_[DatabaseType::ODBC] = driver.connectionParameters;
}

void DatabaseDriverManager::setupFirebirdSQLDriver() {
    DatabaseDriver driver("QIBASE", "FirebirdSQL", "QIBASE");
    driver.description = "FirebirdSQL database driver";
    driver.connectionParameters = {
        ConnectionParameter("database", "Database File", "file", "", true),
        ConnectionParameter("host", "Host", "string", "localhost"),
        ConnectionParameter("port", "Port", "port", "3050"),
        ConnectionParameter("username", "Username", "string", "SYSDBA", true),
        ConnectionParameter("password", "Password", "password", "masterkey", true, true),
        ConnectionParameter("charset", "Character Set", "string", "UTF8")
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkFirebirdSQLAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::FIREBIRD] = driver;

    // Add connection parameters for FirebirdSQL
    connectionParameters_[DatabaseType::FIREBIRD] = driver.connectionParameters;
}

void DatabaseDriverManager::setupSQLiteDriver() {
    DatabaseDriver driver("QSQLITE", "SQLite", "QSQLITE");
    driver.description = "SQLite database driver";
    driver.connectionParameters = {
        ConnectionParameter("database", "Database File", "file", "", true, false, "", "", "Path to SQLite database file")
    };
    driver.requiresAdditionalSetup = false;
    driver.status = checkSQLiteAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::SQLITE] = driver;

    // Add connection parameters for SQLite
    connectionParameters_[DatabaseType::SQLITE] = driver.connectionParameters;
}

void DatabaseDriverManager::setupOracleDriver() {
    DatabaseDriver driver("QOCI", "Oracle", "QOCI");
    driver.description = "Oracle database driver";
    driver.connectionParameters = {
        ConnectionParameter("host", "Host", "string", "localhost"),
        ConnectionParameter("port", "Port", "port", "1521"),
        ConnectionParameter("database", "Database/SID", "string", "", true),
        ConnectionParameter("username", "Username", "string", "", true),
        ConnectionParameter("password", "Password", "password", "", true, true),
        ConnectionParameter("charset", "Character Set", "string", "AL32UTF8")
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install Oracle Instant Client and set ORACLE_HOME environment variable";
    driver.status = checkOracleAvailability() ? DriverStatus::Available : DriverStatus::NeedsInstallation;

    drivers_[DatabaseType::ORACLE] = driver;

    // Add connection parameters for Oracle
    connectionParameters_[DatabaseType::ORACLE] = driver.connectionParameters;
}

void DatabaseDriverManager::setupSQLServerDriver() {
    // SQL Server uses the same driver as MSSQL
    setupMSSQLDriver();
}

void DatabaseDriverManager::setupODBCDriver() {
    DatabaseDriver driver("QODBC", "ODBC", "QODBC");
    driver.description = "Generic ODBC database driver";
    driver.connectionParameters = {
        ConnectionParameter("dsn", "Data Source Name", "string", "", true),
        ConnectionParameter("driver", "ODBC Driver", "string", "", false, false, "", "", "ODBC driver to use"),
        ConnectionParameter("server", "Server", "string", "", false),
        ConnectionParameter("port", "Port", "port", ""),
        ConnectionParameter("database", "Database", "string", "", false),
        ConnectionParameter("username", "Username", "string", "", false),
        ConnectionParameter("password", "Password", "password", "", false, true),
        ConnectionParameter("trusted_connection", "Use Trusted Connection", "bool", "false"),
        ConnectionParameter("encrypt", "Encrypt Connection", "bool", "false"),
        ConnectionParameter("trust_server_certificate", "Trust Server Certificate", "bool", "false")
    };
    driver.requiresAdditionalSetup = true;
    driver.setupInstructions = "Install appropriate ODBC driver for your database";
    driver.status = checkODBCAAvailability() ? DriverStatus::Available : DriverStatus::NotAvailable;

    drivers_[DatabaseType::ODBC] = driver;

    // Add connection parameters for ODBC
    connectionParameters_[DatabaseType::ODBC] = driver.connectionParameters;
}

bool DatabaseDriverManager::checkPostgreSQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QPSQL");
}

bool DatabaseDriverManager::checkMySQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QMYSQL");
}

bool DatabaseDriverManager::checkMariaDBAvailability() {
    return QSqlDatabase::isDriverAvailable("QMYSQL");
}

bool DatabaseDriverManager::checkMSSQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QODBC");
}

bool DatabaseDriverManager::checkODBCAAvailability() {
    return QSqlDatabase::isDriverAvailable("QODBC");
}

bool DatabaseDriverManager::checkFirebirdSQLAvailability() {
    return QSqlDatabase::isDriverAvailable("QFIREBIRD");
}

bool DatabaseDriverManager::checkSQLiteAvailability() {
    return QSqlDatabase::isDriverAvailable("QSQLITE");
}

bool DatabaseDriverManager::checkOracleAvailability() {
    return QSqlDatabase::isDriverAvailable("QOCI");
}

// DatabaseDriverManager Implementation

} // namespace scratchrobin
